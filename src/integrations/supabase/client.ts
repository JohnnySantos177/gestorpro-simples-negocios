
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://jxzbartwbukfbqtylvtk.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imp4emJhcnR3YnVrZmJxdHlsdnRrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY5OTY0MzEsImV4cCI6MjA2MjU3MjQzMX0.FBwOUvJHQ7o25jrpPdXq9qtR0W_FGmvXwF6fwbQMHrU";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Helper function to get data with proper user isolation
export async function getFromTable<T>(table: string) {
  const { data: session } = await supabase.auth.getSession();
  const userId = session.session?.user.id;
  
  if (!userId) {
    throw new Error("Not authenticated");
  }
  
  // Use type assertion to avoid TypeScript errors with dynamic table names
  const { data, error } = await supabase
    .from(table)
    .select('*')
    .eq('user_id', userId) as { data: T[] | null; error: any };
  
  if (error) {
    console.error(`Error fetching from ${table}:`, error);
    throw error;
  }
  
  return data as T[];
}

// Helper function to insert data with proper user isolation
export async function insertIntoTable<T>(table: string, data: any) {
  const { data: session } = await supabase.auth.getSession();
  const userId = session.session?.user.id;
  
  if (!userId) {
    throw new Error("Not authenticated");
  }
  
  // Use type assertion to avoid TypeScript errors with dynamic table names
  const { data: insertedData, error } = await supabase
    .from(table)
    .insert({ ...data, user_id: userId })
    .select()
    .single() as { data: T | null; error: any };
  
  if (error) {
    console.error(`Error inserting into ${table}:`, error);
    throw error;
  }
  
  return insertedData as T;
}

// Helper function to update data with proper user isolation
export async function updateInTable<T>(table: string, id: string, data: any) {
  const { data: session } = await supabase.auth.getSession();
  const userId = session.session?.user.id;
  
  if (!userId) {
    throw new Error("Not authenticated");
  }
  
  // First check if the record belongs to the user
  // Use type assertion to avoid TypeScript errors with dynamic table names
  const { data: existing, error: fetchError } = await supabase
    .from(table)
    .select('id')
    .eq('id', id)
    .eq('user_id', userId)
    .single() as { data: { id: string } | null; error: any };
  
  if (fetchError || !existing) {
    throw new Error("Record not found or you don't have permission to update it");
  }
  
  // Use type assertion to avoid TypeScript errors with dynamic table names
  const { data: updatedData, error } = await supabase
    .from(table)
    .update(data)
    .eq('id', id)
    .eq('user_id', userId)
    .select()
    .single() as { data: T | null; error: any };
  
  if (error) {
    console.error(`Error updating in ${table}:`, error);
    throw error;
  }
  
  return updatedData as T;
}

// Helper function to delete data with proper user isolation
export async function deleteFromTable(table: string, id: string) {
  const { data: session } = await supabase.auth.getSession();
  const userId = session.session?.user.id;
  
  if (!userId) {
    throw new Error("Not authenticated");
  }
  
  // First check if the record belongs to the user
  // Use type assertion to avoid TypeScript errors with dynamic table names
  const { data: existing, error: fetchError } = await supabase
    .from(table)
    .select('id')
    .eq('id', id)
    .eq('user_id', userId)
    .single() as { data: { id: string } | null; error: any };
  
  if (fetchError || !existing) {
    throw new Error("Record not found or you don't have permission to delete it");
  }
  
  // Use type assertion to avoid TypeScript errors with dynamic table names
  const { error } = await supabase
    .from(table)
    .delete()
    .eq('id', id)
    .eq('user_id', userId) as { error: any };
  
  if (error) {
    console.error(`Error deleting from ${table}:`, error);
    throw error;
  }
  
  return true;
}
